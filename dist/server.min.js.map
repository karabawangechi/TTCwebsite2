{"version":3,"sources":["server.js"],"names":["express","require","app","session","passport","bodyParser","jwt","cookieParser","flash","connectDB","Blog","bcrypt","fs","Copperivy","nodemailer","use","json","MongoStore","extended","PORT","process","env","sendConfirmationEmail","userEmail","transporter","createTransport","service","auth","user","pass","mailOptions","from","to","subject","text","sendMail","info","render","log","console","error","_context","t0","Reply","secret","saveUninitialized","pdfkit","create","mongoUrl","path","set","Register","router","Router","req","res","get","resave","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UADNA,WAAUC,QAAQ,eAGlBE,QAAUF,QAAQ,mBAFlBC,MAAMF,QAAZ,iBAIMI,SAAWH,QAAQ,YAHnBI,OAAUJ,QAAGA,YAKbK,IAAML,QAAQ,gBAJdE,WAAUF,QAAQ,cAMlBM,aAAeN,QAAQ,iBALvBO,WAAeP,QAAC,iBAOhBQ,UAAYR,QAAQ,sBANpBG,MAAQH,QAAU,wBAQlBS,KAAOT,QAAQ,uBAPfU,OAASV,QAAQ,UASjBW,GAAKX,QAAQ,MARbK,KAAML,QAAQ,QAUdY,UAAYZ,QAAQ,sBATpBa,SAAab,QAAQ,qCACrBM,OAAAA,QAAeN,SAarBC,IAAIa,IAAIf,QAAQgB,QAZhBd,IAAMe,IAAAA,WAAahB,WAAQ,CAAAiB,UAae,KAE1C,IAAMC,KAAOC,QAAQC,IAAIF,MAAQ,KAgBjCjB,SAAeoB,sBAAfC,GAAArB,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAIWsB,EAAUV,WAAAW,gBAAc,CAAEC,QAAA,QACjCC,KAAW,CADfC,KAAA,GAGWC,KAAU,MAGkBC,EAAA,CACnCC,KAAW,GADfC,GAAAT,EAIWU,QAAX,4BAAuCC,KAAA,6GAdvChC,EAAAA,KAAAA,EAAAA,mBAAAA,MAiBwCsB,EAAAW,SAAAL,IAjBxC5B,KAAAA,EAAAA,OAiBwCkC,EAjBxClC,EAAAA,KAkBQmC,QAAOC,IAAA,cAAXF,GAlBJlC,EAAAA,OAAAA,SA2CekC,GA3CflC,KAAAA,GAAAA,MAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAoBAqC,QAAAC,MAAA,uBAAAC,EAAAC,IApBAxC,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAdAA,IAAIa,IAAIR,gBAfRL,IAAMyC,IAAAA,QAAQ1C,CAiBV2C,OAAQ,eAhBNlC,QAAOT,EAkBT4C,mBAAmB,EAjBjBC,MAAM7B,WAAW8B,OAAD,CAmBdC,SAAU,yCAjBlB9C,IAAM+C,IAAIjD,QAAGC,OAAQ,WAqBrBC,IAAIgD,IAAI,cAAe,OApBvBhD,IAAMW,IAAAA,UAAYZ,QAAQ,OAAA,WAC1BC,IAAMiD,IAAAA,QAAWlD,OAAQ,WAuBzBC,IAAIa,IAAIf,QAAO,OAAQ,YArBvBE,IAAMkD,IAAAA,QAASpD,OAAQqD,iBAEvBnD,IAAIa,IAAIf,IAAAA,QACwBkB,OAAAA,IAAQ,SAAE,SAAAoC,EAAAC,GAA1CA,EAAAlB,OAAA,mBAIAnC,OAAAsD,IAAQjD,SAAY,SAApB+C,EAAAC,GACIxC,EAAIZ,OAAO,eAEXsD,OAAAA,IAAQ,WAFI,SAAAH,EAAAC,GAGZV,EAAAA,OAAAA,iBACyBO,OAAlBI,IAAA,WAAA,SAAAF,EAAAC,GAJXA,EAAAlB,OAAA,iBASAnC,OAAAsD,IAAQ,YAAe,SAAAF,EAAvBC,GACIxC,EAAIsB,OAAA,iBAyBAqB,OAAAC,QAAA,CAAArC,sBAAAA,uBAEII,IAAAA,OAAAA,KAAAA,WACAC,QAAAA,IAAAA,4BAAAA,OAAMR","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst flash = require('connect-flash');\r\nconst passport = require('passport');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst nodemailer = require('nodemailer');\r\nconst cookieParser = require('cookie-parser'); // Added missing import\r\nconst MongoStore = require('connect-mongo'); // Added missing import\r\nconst connectDB = require('./config/db.config');\r\nconst Reply = require('./models/reply.model');\r\nconst Blog = require('./models/blog.model');\r\nconst pdfkit = require('pdfkit');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Copperivy = require('./models/copperivy');\r\nconst Register = require('./models/registerrestaurant.model');\r\n\r\nconst router = express.Router();\r\n\r\napp.use(express.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\nconst PORT = process.env.PORT || 5003;\r\n\r\napp.use(cookieParser())\r\napp.use(session({\r\n    secret: 'keyboard cat',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    store: MongoStore.create({\r\n        mongoUrl: \"mongodb://127.0.0.1:27017/Mwencha\"\r\n    })\r\n}));\r\napp.use(express.static('assets'));\r\napp.set('view engine', 'ejs');\r\napp.use('/assets', express.static('assets'));\r\n\r\napp.use(express.static('assets'));\r\napp.use(express.static('uploads'));\r\napp.use(express.static('node_modules'));\r\napp.use('/', router);\r\n\r\nrouter.get('/Index', (req, res) => { // Fixed incorrect route\r\n    res.render(\"Index.ejs.ejs\");\r\n});\r\nrouter.get('/About', (req, res) => { // Fixed incorrect route\r\n    res.render(\"about.ejs\");\r\n});\r\nrouter.get('/contact', (req, res) => { // Fixed incorrect route\r\n    res.render(\"contact.ejs\");\r\n});\r\n\r\nrouter.get('/courses', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nrouter.get('/register', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nasync function sendConfirmationEmail(userEmail) {\r\n    try {\r\n        // Create a nodemailer transporter\r\n        const transporter = nodemailer.createTransport({\r\n            service: 'gmail',\r\n            auth: {\r\n                user: '',\r\n                pass: '',\r\n            },\r\n        });\r\n\r\n        // Define email options\r\n        const mailOptions = {\r\n            from: '',\r\n            to: userEmail, // Use the provided userEmail parameter\r\n            subject: 'Subscription Confirmation',\r\n            text: 'Thank you for subscribing to our newsletter! You will receive monthly updates on the best places to dine.',\r\n        };\r\n\r\n        // Send the email\r\n        const info = await transporter.sendMail(mailOptions);\r\n        console.log('Email sent:', info);\r\n\r\n        return info;\r\n    } catch (error) {\r\n        console.error('Error sending email:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Export the sendConfirmationEmail function\r\nmodule.exports = { sendConfirmationEmail };\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`App is listening on port ${PORT}`);\r\n});\r\n"]}