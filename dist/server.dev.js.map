{"version":3,"sources":["server.js"],"names":["express","require","app","bodyParser","session","flash","passport","bcrypt","jwt","nodemailer","cookieParser","MongoStore","connectDB","Reply","Blog","pdfkit","fs","path","Copperivy","Register","router","Router","use","json","urlencoded","extended","PORT","process","env","secret","resave","saveUninitialized","store","create","mongoUrl","set","get","req","res","render","sendConfirmationEmail","userEmail","transporter","createTransport","service","auth","user","pass","mailOptions","from","to","subject","text","sendMail","info","console","log","error","module","exports","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst flash = require('connect-flash');\r\nconst passport = require('passport');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst nodemailer = require('nodemailer');\r\nconst cookieParser = require('cookie-parser'); // Added missing import\r\nconst MongoStore = require('connect-mongo'); // Added missing import\r\nconst connectDB = require('./config/db.config');\r\nconst Reply = require('./models/reply.model');\r\nconst Blog = require('./models/blog.model');\r\nconst pdfkit = require('pdfkit');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Copperivy = require('./models/copperivy');\r\nconst Register = require('./models/registerrestaurant.model');\r\n\r\nconst router = express.Router();\r\n\r\napp.use(express.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\nconst PORT = process.env.PORT || 5003;\r\n\r\napp.use(cookieParser())\r\napp.use(session({\r\n    secret: 'keyboard cat',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    store: MongoStore.create({\r\n        mongoUrl: \"mongodb://127.0.0.1:27017/Mwencha\"\r\n    })\r\n}));\r\napp.use(express.static('assets'));\r\napp.set('view engine', 'ejs');\r\napp.use('/assets', express.static('assets'));\r\n\r\napp.use(express.static('assets'));\r\napp.use(express.static('uploads'));\r\napp.use(express.static('node_modules'));\r\napp.use('/', router);\r\n\r\nrouter.get('/Index', (req, res) => { // Fixed incorrect route\r\n    res.render(\"Index.ejs.ejs\");\r\n});\r\nrouter.get('/About', (req, res) => { // Fixed incorrect route\r\n    res.render(\"about.ejs\");\r\n});\r\nrouter.get('/contact', (req, res) => { // Fixed incorrect route\r\n    res.render(\"contact.ejs\");\r\n});\r\n\r\nrouter.get('/courses', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nrouter.get('/register', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nasync function sendConfirmationEmail(userEmail) {\r\n    try {\r\n        // Create a nodemailer transporter\r\n        const transporter = nodemailer.createTransport({\r\n            service: 'gmail',\r\n            auth: {\r\n                user: '',\r\n                pass: '',\r\n            },\r\n        });\r\n\r\n        // Define email options\r\n        const mailOptions = {\r\n            from: '',\r\n            to: userEmail, // Use the provided userEmail parameter\r\n            subject: 'Subscription Confirmation',\r\n            text: 'Thank you for subscribing to our newsletter! You will receive monthly updates on the best places to dine.',\r\n        };\r\n\r\n        // Send the email\r\n        const info = await transporter.sendMail(mailOptions);\r\n        console.log('Email sent:', info);\r\n\r\n        return info;\r\n    } catch (error) {\r\n        console.error('Error sending email:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Export the sendConfirmationEmail function\r\nmodule.exports = { sendConfirmationEmail };\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`App is listening on port ${PORT}`);\r\n});\r\n"],"file":"server.dev.js"}