{"version":3,"sources":["server.js"],"names":["express","require","app","session","cookieParser","MongoStore","connectDB","multer","upload","dest","router","Router","use","json","bodyParser","urlencoded","extended","PORT","process","env","sendConfirmationEmail","userEmail","transporter","mailOptions","info","regeneratorRuntime","async","_context2","prev","next","nodemailer","createTransport","service","console","error","status","pass","from","to","text","awrap","sendMail","sent","abrupt","t0","stop","secret","resave","create","mongoUrl","fields","maxCount","name","req","res","body","files","post","admissionLetter","path","registrationData","nationalID","kceseCertificate","kcseResultSlip","leavingCertificate","birthCertificate","newRegistration","Registration","save","send","_context","set","render","get","module","exports","listen","log"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\n//const flash = require('connect-flash');\r\n//const passport = require('passport');\r\n//const bcrypt = require('bcryptjs');\r\n//const jwt = require('jsonwebtoken');\r\n//const nodemailer = require('nodemailer');\r\nconst cookieParser = require('cookie-parser'); // Added missing import\r\nconst MongoStore = require('connect-mongo'); // Added missing import\r\nconst connectDB = require('./config/db.config');\r\n//const Reply = require('./models/reply.model');\r\n//const Blog = require('./models/blog.model');\r\n//const pdfkit = require('pdfkit');\r\n//const fs = require('fs');\r\nconst multer = require('multer');\r\n//const Copperivy = require('./models/copperivy');\r\n//const Register = require('./models/registerrestaurant.model');\r\nconst upload = multer({ dest: 'uploads/' });\r\nconst router = express.Router();\r\n\r\napp.use(express.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.use(cookieParser())\r\napp.use(session({\r\n    secret: 'keyboard cat',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    store: MongoStore.create({\r\n        mongoUrl: \"mongodb://127.0.0.1:27017/Mwencha\"\r\n    })\r\n}));\r\napp.post('/register', upload.fields([\r\n    { name: 'admissionLetter', maxCount: 1 },\r\n    { name: 'nationalID', maxCount: 1 },\r\n    { name: 'kceseCertificate', maxCount: 1 },\r\n    { name: 'kcseResultSlip', maxCount: 1 },\r\n    { name: 'leavingCertificate', maxCount: 1 },\r\n    { name: 'birthCertificate', maxCount: 1 }\r\n  ]), async (req, res) => {\r\n    try {\r\n      const registrationData = req.body;\r\n      const files = req.files;\r\n  \r\n      // Save file paths to registration data\r\n      registrationData.admissionLetter = files.admissionLetter[0].path;\r\n      registrationData.nationalID = files.nationalID[0].path;\r\n      registrationData.kceseCertificate = files.kceseCertificate[0].path;\r\n      registrationData.kcseResultSlip = files.kcseResultSlip[0].path;\r\n      registrationData.leavingCertificate = files.leavingCertificate[0].path;\r\n      registrationData.birthCertificate = files.birthCertificate[0].path;\r\n      // Save registration data to database\r\n    const newRegistration = new Registration(registrationData);\r\n    await newRegistration.save();\r\n\r\n    res.status(201).send('Registration successful!');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal Server Error');\r\n  }\r\n});\r\n\r\napp.use(express.static('assets'));\r\napp.set('view engine', 'ejs');\r\napp.use('/assets', express.static('assets'));\r\n\r\napp.use(express.static('assets'));\r\napp.use(express.static('uploads'));\r\napp.use(express.static('node_modules'));\r\napp.use('/', router);\r\n\r\nrouter.get('/index', (req, res) => { // Fixed incorrect route\r\n    res.render(\"index.ejs\");\r\n});\r\nrouter.get('/about', (req, res) => { // Fixed incorrect route\r\n    res.render(\"about.ejs\");\r\n});\r\nrouter.get('/contact', (req, res) => { // Fixed incorrect route\r\n    res.render(\"contact.ejs\");\r\n});\r\n\r\nrouter.get('/courses', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nrouter.get('/register', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nasync function sendConfirmationEmail(userEmail) {\r\n    try {\r\n        // Create a nodemailer transporter\r\n        const transporter = nodemailer.createTransport({\r\n            service: 'gmail',\r\n            auth: {\r\n                user: '',\r\n                pass: '',\r\n            },\r\n        });\r\n\r\n        // Define email options\r\n        const mailOptions = {\r\n            from: '',\r\n            to: userEmail, // Use the provided userEmail parameter\r\n            subject: 'Subscription Confirmation',\r\n            text: 'Thank you for subscribing to our newsletter! You will receive monthly updates on the best places to dine.',\r\n        };\r\n\r\n        // Send the email\r\n        const info = await transporter.sendMail(mailOptions);\r\n        console.log('Email sent:', info);\r\n\r\n        return info;\r\n    } catch (error) {\r\n        console.error('Error sending email:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Export the sendConfirmationEmail function\r\nmodule.exports = { sendConfirmationEmail };\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`App is listening on port ${PORT}`);\r\n});\r\n"]}