{"version":3,"sources":["server.js"],"names":["express","require","app","session","MongoStore","bodyParser","multer","Registration","cookieParser","router","Router","use","json","connectDB","extended","env","PORT","Contact","resave","nodemailer","store","create","mongoUrl","urlencoded","secret","get","res","req","storage","diskStorage","file","cb","originalname","upload","post","fields","name","maxCount","_req$body","email","files","newRegistration","transporter","mailOptions","regeneratorRuntime","async","_context","prev","next","body","admissionLetter","path","nationalID","kcseCertificate","leavingCertificate","birthCertificate","awrap","save","createTransport","service","auth","user","pass","sendMail","error","info","console","log","response","t0","status","stop","_req$body2","subject","message","newContact","_context2","render","successMessage","listen","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst cookieParser = require('cookie-parser');\r\nconst MongoStore = require('connect-mongo');\r\nconst connectDB = require('./config/db.config');\r\nconst multer = require('multer');\r\nconst Contact = require('./models/contactform.js');\r\nconst Registration = require('./models/register.js');\r\nconst nodemailer = require('nodemailer'); // Added nodemailer\r\nconst router = express.Router();\r\n\r\napp.use(express.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.use(cookieParser())\r\napp.use(session({\r\n    secret: 'keyboard cat',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    store: MongoStore.create({\r\n        mongoUrl: \"mongodb://127.0.0.1:27017/Mwencha\"\r\n    })\r\n}));\r\napp.use(express.static('assets'));\r\napp.set('view engine', 'ejs');\r\napp.use('/assets', express.static('assets'));\r\n\r\napp.use(express.static('assets'));\r\napp.use(express.static('uploads'));\r\napp.use(express.static('node_modules'));\r\napp.use('/', router);\r\n\r\nrouter.get('/index', (req, res) => {\r\n    res.render(\"index.ejs\");\r\n});\r\nrouter.get('/about', (req, res) => {\r\n    res.render(\"about.ejs\");\r\n});\r\nrouter.get('/contact', (req, res) => {\r\n    res.render(\"contact.ejs\");\r\n});\r\n\r\nrouter.get('/courses', (req, res) => {\r\n    res.render(\"courses.ejs\");\r\n});\r\nrouter.get('/feesstructure', (req, res) => {\r\n    res.render(\"feesstructure.ejs\");\r\n});\r\nrouter.get('/register', (req, res) => {\r\n    res.render(\"register.ejs\");\r\n});\r\nrouter.get('/registerconfirmation', (req, res) => {\r\n    res.render(\"registerconfirmation.ejs\");\r\n});\r\n\r\n\r\n\r\n// Set up multer storage for file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, 'uploads/') // Folder where files will be stored\r\n  },\r\n  filename: function (req, file, cb) {\r\n    cb(null, file.originalname) // Keep original file name\r\n  }\r\n});\r\n\r\nconst upload = multer({ storage: storage });\r\n\r\n// Handle POST request for registration form\r\n// Handle POST request for registration form\r\napp.post('/register', upload.fields([\r\n    { name: 'admissionLetter', maxCount: 1 },\r\n    { name: 'nationalID', maxCount: 1 },\r\n    { name: 'kcseCertificate', maxCount: 1 },\r\n    { name: 'leavingCertificate', maxCount: 1 },\r\n    { name: 'birthCertificate', maxCount: 1 }\r\n  ]), async (req, res) => {\r\n    try {\r\n      const { name, email } = req.body;\r\n      const files = req.files;\r\n  \r\n      // Create a new registration document\r\n      const newRegistration = new Registration({\r\n        name: name,\r\n        email: email,\r\n        admissionLetter: files.admissionLetter[0].path,\r\n        nationalID: files.nationalID[0].path,\r\n        kcseCertificate: files.kcseCertificate[0].path,\r\n        leavingCertificate: files.leavingCertificate[0].path,\r\n        birthCertificate: files.birthCertificate[0].path\r\n      });\r\n  \r\n      // Save the registration document to the database\r\n      await newRegistration.save();\r\n  \r\n      // Send email notification\r\n      const transporter = nodemailer.createTransport({\r\n        service: 'gmail',\r\n        auth: {\r\n          user: 'Iseatout@gmail.com',\r\n          pass: 'iwrnouidsjrjvbzw' // Provide your Gmail app password here\r\n        }\r\n      });\r\n  \r\n      const mailOptions = {\r\n        from: 'Iseatout@gmail.com',\r\n        to: email,\r\n        subject: 'Registration Successful',\r\n        text: `Thank you for registering with Mwencha TTC. Please note that you need to pay Ksh1000 unrefundable registration fee with Paybill 124536. Please forward the M-Pesa message to mwenchattc2023@gmail.com for confirmation.`\r\n      };\r\n  \r\n      transporter.sendMail(mailOptions, (error, info) => {\r\n        if (error) {\r\n          console.log('Error sending email:', error);\r\n        } else {\r\n          console.log('Email sent:', info.response);\r\n        }\r\n      });\r\n  \r\n      \r\n      res.render('registrationconfirmation.ejs' );\r\n    } catch (error) {\r\n      console.error('Error processing registration:', error);\r\n      res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n  });\r\n  app.post('/contactform', async (req, res) => {\r\n    try {\r\n        // Extract data from the request body\r\n        const { name, email, subject, message } = req.body;\r\n\r\n        // Create a new contact document\r\n        const newContact = new Contact({\r\n            name: name,\r\n            email: email,\r\n            subject: subject,\r\n            message: message\r\n        });\r\n\r\n        // Save the contact document to the database\r\n        await newContact.save();\r\n\r\n        // Send response indicating successful contact form submission\r\n         res.render('contact.ejs', { successMessage: 'Your message has been sent. Thank you!' });\r\n    } catch (error) {\r\n        console.error('Error processing contact form:', error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n// Other routes and middleware...\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`App is listening on port ${PORT}`);\r\n});\r\n"]}