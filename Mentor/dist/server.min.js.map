{"version":3,"sources":["server.js"],"names":["express","require","app","session","cookieParser","MongoStore","connectDB","multer","Registration","Subscribe","router","Router","use","bodyParser","urlencoded","extended","PORT","process","env","secret","saveUninitialized","store","create","diskStorage","destination","req","file","cb","originalname","mongoUrl","storage","res","status","userEmail","transporter","nodemailer","createTransport","service","auth","user","pass","mailOptions","from","to","subject","text","sendMail","info","console","log","error","_context2","t0","post","upload","fields","maxCount","name","filename","_req$body","email","files","newRegistration","regeneratorRuntime","async","_context","prev","next","body","admissionLetter","path","nationalID","kcseCertificate","leavingCertificate","birthCertificate","awrap","save","json","message","stop","set","get","render","module","exports","sendConfirmationEmail","_context3","_req$body2","contactData","newContact","_context4","Contact","sent","listen","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\n//const multer = require('multer');\r\n//const flash = require('connect-flash');\r\n//const passport = require('passport');\r\n//const bcrypt = require('bcryptjs');\r\n//const jwt = require('jsonwebtoken');\r\n//const nodemailer = require('nodemailer');\r\nconst cookieParser = require('cookie-parser'); // Added missing import\r\nconst MongoStore = require('connect-mongo'); // Added missing import\r\nconst connectDB = require('./config/db.config');\r\n\r\nconst multer = require('multer');\r\n\r\nconst Contact =require('./models/contactform.js')\r\nconst Registration =require('./models/register.js')\r\nconst Subscribe =require('./models/subscriber.js')\r\n//const upload = multer({ dest: 'uploads/' });\r\nconst router = express.Router();\r\n\r\napp.use(express.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.use(cookieParser())\r\napp.use(session({\r\n    secret: 'keyboard cat',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    store: MongoStore.create({\r\n        mongoUrl: \"mongodb://127.0.0.1:27017/Mwencha\"\r\n    })\r\n}));\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n      cb(null, 'uploads/') // Folder where files will be stored\r\n    },\r\n    filename: function (req, file, cb) {\r\n      cb(null, file.originalname) // Keep original file name\r\n    }\r\n  });\r\n  \r\nconst upload = multer({ storage: storage });\r\n//Handle POST request for registration form\r\napp.post('/register', upload.fields([\r\n    { name: 'admissionLetter', maxCount: 1 },\r\n    { name: 'nationalID', maxCount: 1 },\r\n    { name: 'kcseCertificate', maxCount: 1 },\r\n    { name: 'leavingCertificate', maxCount: 1 },\r\n    { name: 'birthCertificate', maxCount: 1 }\r\n  ]), async (req, res) => {\r\n    try {\r\n      const { name, email } = req.body;\r\n      const files = req.files;\r\n  \r\n      // Create a new registration document\r\n      const newRegistration = new Registration({\r\n        name: name,\r\n        email: email,\r\n        admissionLetter: files.admissionLetter[0].path,\r\n        nationalID: files.nationalID[0].path,\r\n        kcseCertificate: files.kcseCertificate[0].path,\r\n        leavingCertificate: files.leavingCertificate[0].path,\r\n        birthCertificate: files.birthCertificate[0].path\r\n      });\r\n  \r\n      // Save the registration document to the database\r\n      await newRegistration.save();\r\n  \r\n      // Send response indicating successful registration\r\n      res.status(201).json({ message: 'Registration successful' });\r\n    } catch (error) {\r\n      console.error('Error processing registration:', error);\r\n      res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n  });\r\napp.use(express.static('assets'));\r\napp.set('view engine', 'ejs');\r\napp.use('/assets', express.static('assets'));\r\n\r\napp.use(express.static('assets'));\r\napp.use(express.static('uploads'));\r\napp.use(express.static('node_modules'));\r\napp.use('/', router);\r\n\r\nrouter.get('/index', (req, res) => { // Fixed incorrect route\r\n    res.render(\"index.ejs\");\r\n});\r\nrouter.get('/about', (req, res) => { // Fixed incorrect route\r\n    res.render(\"about.ejs\");\r\n});\r\nrouter.get('/contact', (req, res) => { // Fixed incorrect route\r\n    res.render(\"contact.ejs\");\r\n});\r\n\r\nrouter.get('/courses', (req, res) => { // Fixed incorrect route\r\n    res.render(\"courses.ejs\");\r\n});\r\nrouter.get('/register', (req, res) => { // Fixed incorrect route\r\n    res.render(\"register.ejs\");\r\n});\r\n\r\nrouter.get('/contact', (req, res) => {\r\n    \r\n\r\n    res.render(\"contact.ejs\" ,{user});\r\n    })\r\n\r\n    async function sendConfirmationEmail(userEmail) {\r\n        try {\r\n            // Create a nodemailer transporter\r\n            const transporter = nodemailer.createTransport({\r\n                service: 'gmail',\r\n                auth: {\r\n                    user: 'Iseatout@gmail.com',\r\n                    pass: 'dytjsxykactbirfc',\r\n                },\r\n            });\r\n    \r\n            // Define email options\r\n            const mailOptions = {\r\n                from: 'Iseatout@gmail.com',\r\n                to: userEmail, // Use the provided userEmail parameter\r\n                subject: 'Subscription Confirmation',\r\n                text: 'Thank you for subscribing to our newsletter! You will receive monthly updates on the best places to dine.',\r\n            };\r\n    \r\n            // Send the email\r\n            const info = await transporter.sendMail(mailOptions);\r\n            console.log('Email sent:', info);\r\n    \r\n            return info;\r\n        } catch (error) {\r\n            console.error('Error sending email:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    // Export the sendConfirmationEmail function\r\n    module.exports = { sendConfirmationEmail };\r\n    \r\n    // Use the sendConfirmationEmail function in your route handler\r\n    app.post('/subscribe', async (req, res) => {\r\n        const { email } = req.body;\r\n    \r\n        // Save the subscriber's email in your database or perform any other necessary actions\r\n    \r\n        try {\r\n            // Send the confirmation email by passing the email as a parameter\r\n            await sendConfirmationEmail(email);\r\n    \r\n            // Render a success page or respond with a success message\r\n            const Subcriber = { email };\r\n            res.render('Subscribe.ejs', { user });\r\n        } catch (error) {\r\n            console.error('Error subscribing:', error);\r\n            res.status(500).json({ error: 'An error occurred' });\r\n        }\r\n    });\r\n    \r\n\r\n    router.post('/contactform',  async (req, res) => {\r\n        const { name, message, email,subject } =req.body\r\n        // Assuming you have set up user authentication\r\n        const contactData = {\r\n            name,\r\n             message,\r\n             subject,\r\n              email };\r\n      \r\n        try {\r\n          const newContact = await Contact.create(contactData);\r\n          res.render('contact.ejs',{newContact}); // Redirect to the newly created reply\r\n        } catch (error) {\r\n          console.error('Error creating reply:', error);\r\n          res.status(500).json({ error: 'Internal Server Error' });\r\n        }\r\n      });\r\napp.listen(PORT, () => {\r\n    console.log(`App is listening on port ${PORT}`);\r\n});\r\n"]}